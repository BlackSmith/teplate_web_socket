version: "2.7"

services:

  traefik:
    image: "traefik:v2.6"
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:8000"
    ports:
      - "8000:8000"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  frontend:
    image: node:lts-slim
    working_dir: /app
    volumes:
      - ./frontend:/app
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=PathPrefix(`/`)"
      - "traefik.http.services.frontend.loadbalancer.server.port=5173"
    expose:
      - 5173
    #    ports:
    #      - 5173:5173
    command: sh -c 'npm install -g npm@10.4.0 && npm install && npm run dev -- --host 0.0.0.0'


  backend:
    image: python:3.11-slim
    working_dir: /app
    volumes:
      - ./backend:/app
      - ./static:/app/static
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=PathPrefix(`/backend`)"
      - "traefik.http.services.backend.loadbalancer.server.port=8000"
    expose:
      - 8000
#    ports:
#      - 8000:8000
    command: sh -c 'pip install --upgrade pip && pip install -r requirements.txt && pip install -r requirements_dev.txt && adev runserver -s /app/static --host 0.0.0.0'
    restart: always

  db:
    image: tensorchord/pgvecto-rs:pg16-v0.1.13
    user: 1000:1000
    env_file:
      - .envs
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - ./.db:/var/lib/postgresql/data
#    ports:
#      - 5432:5432

  adminer:
    image: adminer
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.adminer.rule=PathPrefix(`/adminer`)"
      - "traefik.http.services.adminer.loadbalancer.server.port=8080"
#    ports:
#      - 8081:8080
